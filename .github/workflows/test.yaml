name: CI Workflow

on:
  push:
    branches:
      - main

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Docker login to ECR registry
        uses: docker/login-action@v3
        with:
          registry: 339713191041.dkr.ecr.eu-north-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Install dependencies
        run: docker-compose exec -it php-fpm composer install

  code-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Docker login to ECR registry
        uses: docker/login-action@v3
        with:
          registry: 339713191041.dkr.ecr.eu-north-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Install dependencies
        uses: php-actions/composer@v6

      - name: Run linter
        uses: php-actions/composer@v6
        with:
          command: cs-fix

  code-phpstan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Docker login to ECR registry
        uses: docker/login-action@v3
        with:
          registry: 339713191041.dkr.ecr.eu-north-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Install dependencies
        uses: php-actions/composer@v6

      - name: Run PHPstan
        uses: php-actions/composer@v6
        with:
          command: phpstan

  code-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Docker login to ECR registry
        uses: docker/login-action@v3
        with:
          registry: 339713191041.dkr.ecr.eu-north-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Install dependencies
        uses: php-actions/composer@v6

      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: aschmelyun/cleaver:latest
          options: -v ${{ github.workspace }}:/var/www/html
          run: |
            composer install
            composer phpunit
#  test:
#    needs: install-dependencies
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Docker Compose
#        run: docker-compose up -d
#
#      - name: Run tests
#        run: docker-compose exec -it php-fpm bin/phpunit
#
#  lint:
#    needs: install-dependencies
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Docker Compose
#        run: docker-compose up -d
#
#      - name: Run linter
#        run: docker-compose exec -it php-fpm composer cs-fix
#
#  build:
#    needs: install-dependencies
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Docker Compose
#        run: docker-compose up -d
#
#      - name: Build project
#        run: docker-compose exec -it php-fpm php bin/console cache:warmup



#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1

#  - name: Automatic Tagging of Releases
#      id: increment-git-tag
#      run: |
#        bash ./build/git_update.sh -v major
#
#        - name: Build, Tag, and Push the Image to Amazon ECR
#          id: build-image
#          env:
#            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#            ECR_REPOSITORY: lesson-086
#            IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
#          run: |
#            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
