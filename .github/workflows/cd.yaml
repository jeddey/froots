name: Deploy

on:
  push:
    branches:
      - main
#on:
#  workflow_run:
#    workflows: ["Push the Docker image to AWS ECR Repo"]
#    types:
#      - completed
env:
  AWS_REGION: eu-north-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: php           # set this to your Amazon ECR repository name
  ECS_SERVICE: deploy-cluster-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: deploy-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./task-definition.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: app           # set this to the name of the container in the
  # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: ssh key passphrase
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 339713191041.dkr.ecr.eu-north-1.amazonaws.com/php
            mkdir /var/www/html
            cd /var/www/html
            docker pull 339713191041.dkr.ecr.eu-north-1.amazonaws.com/php:latest
            docker run 339713191041.dkr.ecr.eu-north-1.amazonaws.com/php


#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
